COMP 321 Project 3: Linking
Alex Li asl11 
Chris Lee chl4

---(Do not write lines of text that exceed the width of this line.)------------

PROBLEM 7.6

Buf: Yes, in symtab.
	 Symbol Type - Extern
	 Module - m.o
	 Section - .data

Bufp0: Yes, in symtab
	   Symbol Type - global
	   Module - swap.o 
	   Section - .data

Bufp1: Yes, in symtab
	   Symbol Type - local
	   Module - swap.o
	   Section - .bss

swap: Yes, in symtab
	  Symbol Type - global
	  Module - swap.o
	  Section - .text

temp: No, not in symtab

incr: Yes, in symtab
	  Symbol Type - local
	  Module - swap.o
	  Section - .text

count: Yes, in symtab 
	   Symbol Type - local
	   Module - swap.o
	   Section - .bss

PROBLEM 7.9

Since C doesn't initialize variables to any set value, the uninitialized 
variable main is set to whatever was at the point in memory that C
allocated for the variable to be. The stack frame doesn't contain 
newly allocated memory, so the contents of the memory at runtime 
will appear as the initial values of main, because main was never
initialized to any other value. 

PROBLEM 7.12

To do this problem we followed the steps outlined in the procedure Figure 7.10.
For a PC-relative reference, since the r.type is R_X86_64_PC32, we go to the 
if statement on line 6, and implement the equation:
(ADDR(r.symbol) + r.addend - refaddr); 

where r.addend = -4, refaddr = ADDR(s) + r.offset, and r.offset = 0xa
ADDR(s) = ADDR(.test) and ADDR(r.symbol) = ADDR(swap)
A. 
r.symbol + (-4) - ADDR(s) - offset = 
	0x4004f8 - 4 - 0x4004e0 - 0xa
	= 4004f4 - 4004e0 - a 
	= 0xa or 10 in decimal

B.
r.symbol + addend - ADDR(s) - offset = 
	0x400500 - 4 - 0x4004d0 - a
	= 0x4004FC - 4004da
	= 0x22 or 34 in decimal

READJCF

DESIGN DESCRIPTION

---(Do not write lines of text that exceed the width of this line.)------------

OVERVIEW:

We designed the readjcf program to go down the java class file and read the 
bytes in the order of appearance, passing along a pointer in the file to 
seperate parts of our code. For example, the read_header function will 
read the first amount of bytes associated with a header, 4 bytes for magic, 
2 bytes for minor version, and 2 bytes for major version. Then, the file 
pointer, now 8 bytes down the file, will be passed to the next function,
process_constantpool, and the same procedure will continue. 

SPECIFIC FUNCTIONS OF INTEREST:

	PROCESS JCF CONSTANT
	For this function, we first read the constant pool count from fread so that
	we could read that number of constants in our constant pool. From there, we
	had a switch case to handle all the different potential constant structs
	such as jcf_cp_info_1u2 or jcf_cp_info_2u2, by first reading the tag of the
	constant in the constant pool, and then giving that tag to the switch case.

	Then for each separate constant, we malloc the seperate structs to store at
	the indices in the pool, while reading the allocated number of bytes into
	storage based on the tag. For the most part, these are all had the same
	approach: we would creat a temporary struct of the specific type and then
	read the information into them and flip them around using ntohs and ntohl.

	However, for the UTF-8 tag case, we have to first read out the length of the
	byte array that follows, and then malloc the correct amount of space to be
	allocated to the byte array stored in the jcf_cp_utf8.

	At the end of this function, we included a check for the depends_flag, and
	if that was the case we printed the dependencies as well.


	PRINT JCF CONSTANT
	For this function, we verify the tag and the index before casting a
	info pointer into a different pointer type, and then printing out
	the various fields of the struct with a switch statement in order
	to seperate around the various tags.

	DESTROY CONSTANT POOL
	We loop over the entire constant pool, freeing the structs at the 
	various elements of the constant pool, before finally freeing the 
	entire constant pool struct. One thing to note is that because long 
	and double take two indices, we have i++ in the case that the tag
	is long or double.

	PROCESS BODY/HEADER/INTERFACES/ATTRIBUTES
	For these functions, since we don't really have to do anything with 
	the data stored in these areas, we just use fread to make sure that 
	we read the exact correct number of bytes, such that by the end of the 
	process we have reached what should be the end of file, and can verify that
	the jcm file is correctly formatted. For header, we have to verify the
	magic number, but otherwise we create the associated structs(body or
	header) and fill in the fields with the data from fread, then move on to 
	the next section of the jcm. For the attributes, we will read the attribute
	count, then loop over of the attribute array, reading each of the them
	by first reading attribute name index, then length, then the data in 
	the attributes byte array. 


TESTING STRATEGY

We tested the function by compiling a java class file from another COMP course
that we are in that teaches Java, COMP 322. For any given .class files and all
the given tests, we would not only try all combinations of flags but we would
run it using our readjcf file, making sure to compile it using make if we made
any changes, and then we would put this output into a a file (e.g. output).
Then, we would run the same .class file using the given readjcf_ref that was
given to us and then put that output into a different file (e.g. output2). Then
we would use the diff command on the two files to confirm that they had the
exact same output. By doing so, we would be confirming that all of the functions
we wrote were being tested in their entirety (except for
process_jcf_constant_pool) which we discuss in the next paragraph as how we get
all the different kinds of constants, since we would be making sure that our
outputs for header, body, interfaces, and attributes all matched the reference
function.

First we started by confirming that our code was able to read a basic .class
file, so we wrote a simple one that had all the potential different parts that
we have to check for, such as all the different possible constants in constant
pool, and made sure our program initially was able to handle this. We did this
by simply writing a java class that had instance variables of all the different
types (e.g. int, long, double, String, etc.).

Then, we tried breaking our code, using the hexedit command on the class files
to try and break certain aspects of our code. We broke the class such as by
changing the magic number from 0xCAFEBEBE, changing the minor and major
version bytes, chainging the number of tags, the amount of memory allocated, 
etc. and made sure that our program would run into the same errors that the
reference program would.

From there we moved onto more complex java class files as mentioned at the
beginning. We got java class files from classes we are in such as COMP 322 and
COMP 215 and made sure that our program would be able to read through and not
throw any errors on large, complex .class files. For these we also proceeded to
break certain bits as before and making sure that our program and the reference
program both broke in the same areas.

The chosen test cases are sufficient because with every test we would try and
reach a new part of our code. For example, we added every single type of
constant from constant pool in our initial java class so that we would test all
the different cases in the switch case in process_jcf_constant_pool. In this
way, we were able to achieve nearly full code coverage over our program, fixing
any bugs that we found along the way. Thus, we believe that our chosen test
cases are sufficient.